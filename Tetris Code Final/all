from KBHit import KBHit

def main()->None:
    # initialize and run the Tetris game
    game = Game()
    game.run()
    return 

if __name__ == "__main__":
    main()


class Block:
    def __init__(self, x:int=0, y:int=0):
        self.shapes = \
            [[[0, 1, 0, 0],
             [0, 1, 0, 0],
             [0, 1, 0, 0],
             [0, 1, 1, 0]],

             [[0, 0, 0, 0],
             [0, 0, 0, 1],
             [1, 1, 1, 1],
             [0, 0, 0, 0]],
             
             [[0, 1, 1, 0],
              [0, 0, 1, 0],
              [0, 0, 1, 0],
              [0, 0, 1, 0]],

              [[0, 0, 0, 0],
               [1, 1, 1, 1],
               [1, 0, 0, 0],
               [0, 0, 0, 0]]]

        self.x = x
        self.y = y
        self.current_direction = 0
        
    # rotate the current block counterclockwise by 90 degree
    def rotateLeft(self)->None:
        # your code here
        self.current_direction = (self.current_direction + 1) % 4
        return
    
    # move the current block downward by one
    def moveDown(self)->None:
        # your code here
        self.x += 1
        return
    
    # move the current block rightward by one
    def moveRight(self)->None:
        # your code here
        self.y += 1
        return
    
    # move the current block leftward by one 
    def moveLeft(self)->None:
        # your code here
        self.y -= 1
        return
    
    # return current shape of the block
    def getShape(self)->"list[list[int]]":
        return self.shapes[self.current_direction]
    

class Board:
    def __init__(self):
        self.shape = Block()
        self.board = [[0] * 20 for _ in range(15)]
    
    # check if current block is valid
    def isBlockValid(self, x:int, y:int)->bool:
        shape = self.shape.getShape()
        for i in range(4):
            for j in range(4):
                if shape[i][j] == 1:
                    # check if the block is within the board boundaries
                    if x + i < 0 or x + i >= 15 or y + j < 0 or y + j >= 20:
                        return False
                    # check if the block overlaps with existing blocks on the board
                    if self.board[x + i][y + j] != 0:
                        return False
        return True
    
    # move the block downward by 1 positon if the move is valid, otherwise do nothing 
    def tryMoveDown(self)->None:
        if self.isBlockValid(self.shape.x + 1, self.shape.y):
            self.shape.moveDown()
        else:
            self.dump()
            self.putNewBlock()
    
    # write current shape to the board permanently
    def dump(self)->None:
        shape = self.shape.getShape()
        for i in range(4):
            for j in range(4):
                if shape[i][j] == 1:
                    self.board[self.shape.x + i][self.shape.y + j] = 1
    

    # put a new block on the top of the board
    def putNewBlock(self)->None:
        self.shape = Block(0, 8)
        if not self.isBlockValid(self.shape.x, self.shape.y):
            raise Exception("Game Over!")
    
    
    # return the current board with block on it 
    def getView(self)->"list[list[int]]":
        tmp = [self.board[i][:] for i in range(15)]
        for i in range(4):
            for j in range(4):
                if (self.shape.x + i < 15 and
                    self.shape.y + j < 20 and
                    self.shape.y + j >= 0 and
                    self.shape.getShape()[i][j] == 1):
                    tmp[self.shape.x + i][self.shape.y + j] = 1
        return tmp




class Game:
    def __init__(self):
        self.board = Board()
        self.kb = KBHit() # a class that read input from the keyboard

    # start the game
    def run(self)->None:
        while True:
            self.display()
            if not self.board.tryMoveDown():
                self.board.dump()
                self.board.putNewBlock()
                if not self.board.isBlockValid(self.board.shape.x, self.board.shape.y):
                    print("Game Over")
                    return
            if self.kb.kbhit():
                c = self.kb.getch()
                if c == 'a':
                    self.board.shape.moveLeft()
                elif c == 'd':
                    self.board.shape.moveRight()
                elif c == 's':
                    self.board.tryMoveDown()
                elif c == 'w':
                    self.board.shape.rotateLeft()
                elif c == 'q':
                    return

    # print board on the command line
    def display(self)->None:
        board = self.board.getView()
        for i in range(len(board)):
            print(' '.join(map(str, board[i])).replace('0', '-').replace('1', 'X'))
        print()

